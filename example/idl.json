{
  "address": "9gJ7jZaAvUafgTFPoqkCwbuvC9kpZCPtHfHjMkQ66wu9",
  "metadata": {
    "name": "lazorkit",
    "version": "0.1.0",
    "spec": "0.1.0",
    "description": "Created with Anchor"
  },
  "docs": [
    "The Lazor Kit program provides smart wallet functionality with passkey authentication"
  ],
  "instructions": [
    {
      "name": "create_smart_wallet",
      "docs": ["Create a new smart wallet with passkey authentication"],
      "discriminator": [129, 39, 235, 18, 132, 68, 203, 19],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "smart_wallet_seq",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  115, 101, 113
                ]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "docs": [
            "It is initialized with 0 space because its data is stored in SmartWalletConfig."
          ],
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_seq.seq",
                "account": "SmartWalletSeq"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_authenticator",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "arg",
                "path": "passkey_pubkey.to_hashed_bytes(smart_wallet"
              }
            ]
          }
        },
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "passkey_pubkey",
          "type": {
            "array": ["u8", 33]
          }
        },
        {
          "name": "credential_id",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "execute_instruction",
      "docs": ["Execute an instruction with passkey authentication"],
      "discriminator": [48, 18, 40, 40, 75, 74, 147, 110],
      "accounts": [
        {
          "name": "payer",
          "signer": true
        },
        {
          "name": "config",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet_config.id",
                "account": "SmartWalletConfig"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  99, 111, 110, 102, 105, 103
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              }
            ]
          }
        },
        {
          "name": "smart_wallet_authenticator",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  97, 117, 116, 104, 101, 110, 116, 105, 99, 97, 116, 111, 114
                ]
              },
              {
                "kind": "account",
                "path": "smart_wallet"
              },
              {
                "kind": "arg",
                "path": "args.passkey_pubkey.to_hashed_bytes(smart_wallet"
              }
            ]
          }
        },
        {
          "name": "ix_sysvar",
          "address": "Sysvar1nstructions1111111111111111111111111"
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "cpi_program"
        }
      ],
      "args": [
        {
          "name": "args",
          "type": {
            "defined": {
              "name": "ExecuteInstructionArgs"
            }
          }
        }
      ]
    },
    {
      "name": "initialize",
      "docs": ["Initialize the program by creating the sequence tracker"],
      "discriminator": [175, 175, 109, 31, 13, 152, 155, 237],
      "accounts": [
        {
          "name": "signer",
          "writable": true,
          "signer": true
        },
        {
          "name": "config",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [99, 111, 110, 102, 105, 103]
              }
            ]
          }
        },
        {
          "name": "smart_wallet_seq",
          "writable": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115, 109, 97, 114, 116, 95, 119, 97, 108, 108, 101, 116, 95,
                  115, 101, 113
                ]
              }
            ]
          }
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": []
    }
  ],
  "accounts": [
    {
      "name": "Config",
      "discriminator": [155, 12, 170, 224, 30, 250, 204, 130]
    },
    {
      "name": "SmartWalletAuthenticator",
      "discriminator": [126, 36, 85, 166, 77, 139, 221, 129]
    },
    {
      "name": "SmartWalletConfig",
      "discriminator": [138, 211, 3, 80, 65, 100, 207, 142]
    },
    {
      "name": "SmartWalletSeq",
      "discriminator": [12, 192, 82, 50, 253, 49, 195, 84]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "PasskeyMismatch",
      "msg": "Passkey public key mismatch with stored authenticator"
    },
    {
      "code": 6001,
      "name": "SmartWalletMismatch",
      "msg": "Smart wallet address mismatch with authenticator"
    },
    {
      "code": 6002,
      "name": "AuthenticatorNotFound",
      "msg": "Smart wallet authenticator account not found or invalid"
    },
    {
      "code": 6003,
      "name": "Secp256r1InvalidLength",
      "msg": "Secp256r1 instruction has invalid data length"
    },
    {
      "code": 6004,
      "name": "Secp256r1HeaderMismatch",
      "msg": "Secp256r1 instruction header validation failed"
    },
    {
      "code": 6005,
      "name": "Secp256r1DataMismatch",
      "msg": "Secp256r1 signature data validation failed"
    },
    {
      "code": 6006,
      "name": "Secp256r1InstructionNotFound",
      "msg": "Secp256r1 instruction not found at specified index"
    },
    {
      "code": 6007,
      "name": "InvalidSignature",
      "msg": "Invalid signature provided for passkey verification"
    },
    {
      "code": 6008,
      "name": "ClientDataInvalidUtf8",
      "msg": "Client data JSON is not valid UTF-8"
    },
    {
      "code": 6009,
      "name": "ClientDataJsonParseError",
      "msg": "Client data JSON parsing failed"
    },
    {
      "code": 6010,
      "name": "ChallengeMissing",
      "msg": "Challenge field missing from client data JSON"
    },
    {
      "code": 6011,
      "name": "ChallengeBase64DecodeError",
      "msg": "Challenge base64 decoding failed"
    },
    {
      "code": 6012,
      "name": "ChallengeDeserializationError",
      "msg": "Challenge message deserialization failed"
    },
    {
      "code": 6013,
      "name": "TimestampTooOld",
      "msg": "Message timestamp is too far in the past"
    },
    {
      "code": 6014,
      "name": "TimestampTooNew",
      "msg": "Message timestamp is too far in the future"
    },
    {
      "code": 6015,
      "name": "NonceMismatch",
      "msg": "Nonce mismatch: expected different value"
    },
    {
      "code": 6016,
      "name": "NonceOverflow",
      "msg": "Nonce overflow: cannot increment further"
    },
    {
      "code": 6017,
      "name": "CpiDataMissing",
      "msg": "CPI data is required but not provided"
    },
    {
      "code": 6018,
      "name": "InsufficientCpiAccounts",
      "msg": "Insufficient remaining accounts for CPI instruction"
    },
    {
      "code": 6019,
      "name": "AccountSliceOutOfBounds",
      "msg": "Account slice index out of bounds"
    },
    {
      "code": 6020,
      "name": "SolTransferInsufficientAccounts",
      "msg": "SOL transfer requires at least 2 remaining accounts"
    },
    {
      "code": 6021,
      "name": "CpiDataInvalid",
      "msg": "CPI data provided is invalid"
    },
    {
      "code": 6022,
      "name": "NewAuthenticatorMissing",
      "msg": "New authenticator account is required but not provided"
    },
    {
      "code": 6023,
      "name": "NewAuthenticatorPasskeyMissing",
      "msg": "New authenticator passkey is required but not provided"
    },
    {
      "code": 6024,
      "name": "InsufficientLamports",
      "msg": "Insufficient lamports for requested transfer"
    },
    {
      "code": 6025,
      "name": "TransferAmountOverflow",
      "msg": "Transfer amount would cause arithmetic overflow"
    },
    {
      "code": 6026,
      "name": "InvalidBumpSeed",
      "msg": "Invalid bump seed for PDA derivation"
    },
    {
      "code": 6027,
      "name": "InvalidAccountOwner",
      "msg": "Account owner verification failed"
    },
    {
      "code": 6028,
      "name": "InvalidAccountDiscriminator",
      "msg": "Account discriminator mismatch"
    }
  ],
  "types": [
    {
      "name": "Config",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "authority",
            "type": "pubkey"
          },
          {
            "name": "create_smart_wallet_fee",
            "type": "u64"
          },
          {
            "name": "execute_instruction_fee",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "ExecuteInstructionArgs",
      "docs": ["Arguments for the execute_instruction entrypoint"],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_pubkey",
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "signature",
            "type": "bytes"
          },
          {
            "name": "client_data_json_raw",
            "type": "bytes"
          },
          {
            "name": "authenticator_data_raw",
            "type": "bytes"
          },
          {
            "name": "verify_instruction_index",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "SmartWalletAuthenticator",
      "docs": ["Account that stores authentication data for a smart wallet"],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "passkey_pubkey",
            "docs": [
              "The public key of the passkey that can authorize transactions"
            ],
            "type": {
              "array": ["u8", 33]
            }
          },
          {
            "name": "smart_wallet",
            "docs": ["The smart wallet this authenticator belongs to"],
            "type": "pubkey"
          },
          {
            "name": "credential_id",
            "docs": ["The credential ID this authenticator belongs to"],
            "type": "bytes"
          },
          {
            "name": "bump",
            "docs": ["Bump seed for PDA derivation"],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "SmartWalletConfig",
      "docs": ["Data account for a smart wallet"],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "id",
            "docs": ["Unique identifier for this smart wallet"],
            "type": "u64"
          },
          {
            "name": "last_nonce",
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "SmartWalletSeq",
      "docs": [
        "Account that maintains the sequence number for smart wallet creation"
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "seq",
            "docs": [
              "Current sequence number, incremented for each new smart wallet"
            ],
            "type": "u64"
          }
        ]
      }
    }
  ]
}
